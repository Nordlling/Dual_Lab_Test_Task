{"version":3,"sources":["serviceWorker.js","redux/usd-reducer.js","redux/eur-reducer.js","redux/rur-reducer.js","redux/dates-reducer.js","redux/redux-store.js","table/TableList.js","table/TableContainer.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","usd","usdReducer","state","action","type","eur","eurReducer","rur","rurReducer","dates","datesReducer","reducers","combineReducers","usdPage","eurPage","rurPage","datesPage","store","createStore","TableList","props","interval","e","first","Date","stateFirstDate","value1","last","stateLastDate","value2","getTime","firstDate","getFullYear","getMonth","getDate","lastDate","componentDidMount","value","hasError","textError","handleChange","bind","handleChangeFirstDate","handleChangeLastDate","event","this","setState","target","arguments","length","axios","then","response","setEur","data","catch","error","setUsd","setRur","firstDatesArray","lastDatesArray","index","Math","floor","datesArray","i","push","transfer","transferArray","slice","setDates","message","class","onSubmit","handleSubmit","size","placeholder","onChange","indexOf","border","map","p","Cur_OfficialRate","min","apply","item","max","defaultValue","name","required","React","Component","connect","dispatch","setUsdAC","setEurAC","setRurAC","setDatesAC","App","render","TableContainer","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.e331b8c6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","// Инициализация локального состояния, в котором будут храниться курсы евро\r\nlet initialState = {\r\n  usd: [\r\n  ]\r\n};\r\n\r\n// Редьюсер, который принимает предыдущее состояние и действие с долларами и возвращает следующее состояние\r\nconst usdReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'SET-USD': {\r\n      return { ...state, usd: action.usd}\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n\r\n\r\nexport const setUsdAC = (usd) => ({type: 'SET-USD', usd})\r\n\r\nexport default usdReducer;","// Инициализация локального состояния, в котором будут храниться курсы евро\r\nlet initialState = {\r\n  eur: [\r\n  ]\r\n};\r\n\r\n// Редьюсер, который принимает предыдущее состояние и действие с евро и возвращает следующее состояние\r\nconst eurReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'SET-EUR': {\r\n      return { ...state, eur: action.eur}\r\n    }\r\n    default:\r\n      return state;\r\n\r\n  }\r\n\r\n}\r\n\r\nexport const setEurAC = (eur) => ({type: 'SET-EUR', eur})\r\n\r\nexport default eurReducer;\r\n","// Инициализация локального состояния, в котором будут храниться курсы евро\r\nlet initialState = {\r\n  rur: [\r\n  ]\r\n};\r\n\r\n// Редьюсер, который принимает предыдущее состояние и действие с рублями и возвращает следующее состояние\r\nconst rurReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'SET-RUR': {\r\n      return { ...state, rur: action.rur}\r\n    }\r\n    default:\r\n      return state;\r\n\r\n  }\r\n\r\n}\r\n\r\nexport const setRurAC = (rur) => ({type: 'SET-RUR', rur})\r\n\r\nexport default rurReducer;\r\n","// Инициализация локального состояния, в котором будут храниться курсы евро\r\nlet initialState = {\r\n  dates: [\r\n  ]\r\n};\r\n\r\n// Редьюсер, который принимает предыдущее состояние и действие с датами и возвращает следующее состояние\r\nconst datesReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'SET-DATES': {\r\n      return { ...state, dates: action.dates}\r\n    }\r\n    default:\r\n      return state;\r\n\r\n  }\r\n\r\n}\r\n\r\nexport const setDatesAC = (dates) => ({type: 'SET-DATES', dates})\r\n\r\nexport default datesReducer;\r\n","import { createStore, combineReducers } from \"redux\";\r\nimport usdReducer from \"./usd-reducer\"\r\nimport eurReducer from \"./eur-reducer\"\r\nimport rurReducer from \"./rur-reducer\"\r\nimport datesReducer from \"./dates-reducer\"\r\n\r\n\r\n// Редьюсер, который объединяет все отдельные редьюсеры\r\nlet reducers = combineReducers({\r\n  usdPage: usdReducer,\r\n  eurPage: eurReducer,\r\n  rurPage: rurReducer,\r\n  datesPage: datesReducer\r\n});\r\n\r\n// Хранилище, которое хранит все состояния\r\nlet store = createStore(reducers);\r\n\r\nwindow.store = store\r\n\r\nexport default store;","  import React from 'react';\r\n  import '../css/style.css';\r\n  import '../css/lato-font.css';\r\n  import * as axios from 'axios';\r\n\r\n  class TableList extends React.Component {\r\n\r\n    // Конструктор, где инициализированы состояния компонента\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {value: '', hasError: false, textError: ''};\r\n      this.stateFirstDate = {value1: `${new Date(new Date().getTime() - 518400000).getFullYear()}-${new Date(new Date().getTime() - 518400000).getMonth()+1}-${new Date(new Date().getTime() - 518400000).getDate()}`}\r\n      this.stateLastDate = {value2: `${new Date().getFullYear()}-${new Date().getMonth()+1}-${new Date().getDate()}`}\r\n\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleChangeFirstDate = this.handleChangeFirstDate.bind(this);\r\n      this.handleChangeLastDate = this.handleChangeLastDate.bind(this);\r\n      \r\n    }\r\n    \r\n    // Метод, который вносит ввёденные данные имени валюты в state\r\n    handleChange(event) {\r\n      this.setState({value: event.target.value});\r\n    }\r\n\r\n    // Метод, который вносит ввёденные данные начальной даты в stateFirstDate\r\n    handleChangeFirstDate(event) {\r\n      //this.setState({value1: event.target.value})\r\n      this.stateFirstDate.value1 = event.target.value\r\n      this.interval()\r\n    }\r\n\r\n    // Метод, который вносит ввёденные данные последней даты в stateLastDate\r\n    handleChangeLastDate(event) {\r\n      //this.setState({value2: event.target.value})\r\n      this.stateLastDate.value2 = event.target.value\r\n      this.interval()\r\n    }\r\n\r\n    // Метод, который запускается после того, как компонент отрендерился в DOM\r\n    componentDidMount(firstDate, lastDate) {\r\n      // Если новые даты еще не вводили, то создаются начальная дата и последняя, в зависимости от текущего дня и преобразуется в формат YYYY-MM-DD, необходимый для GET запроса\r\n      // Если новые даты вводили, то для GET запроса используются аргументы метода componentDidMount(), который был вызван в методе interval()\r\n      if(arguments.length === 0) {\r\n      var first = new Date(new Date().getTime() - 518400000);\r\n      var firstDate = `${first.getFullYear()}-${first.getMonth()+1}-${first.getDate()}`;\r\n      var last = new Date();\r\n      var lastDate = `${last.getFullYear()}-${last.getMonth()+1}-${last.getDate()}`;\r\n      }\r\n      // GET запрос данных с сервера с помощью библиотеки axios\r\n      axios.get(`https://www.nbrb.by/API/ExRates/Rates/Dynamics/292?startDate=${firstDate}&endDate=${lastDate}`).then(response => {\r\n        this.props.setEur(response.data)\r\n      }).catch(error => {\r\n        this.setState({hasError: true, textError: error}) // обработчик ошибок\r\n      }); \r\n      axios.get(`https://www.nbrb.by/API/ExRates/Rates/Dynamics/145?startDate=${firstDate}&endDate=${lastDate}`).then(response => {\r\n        this.props.setUsd(response.data)\r\n      }).catch(error => {\r\n        this.setState({hasError: true, textError: error}) // обработчик ошибок\r\n      }); \r\n      axios.get(`https://www.nbrb.by/API/ExRates/Rates/Dynamics/298?startDate=${firstDate}&endDate=${lastDate}`).then(response => {\r\n        this.props.setRur(response.data)\r\n      }).catch(error => {\r\n        this.setState({hasError: true, textError: error}) // обработчик ошибок\r\n      }); \r\n      \r\n      // Создание массива дат в формате DD/MM/YY для отображения в таблице\r\n      let firstDatesArray = new Date(firstDate).getTime()\r\n      let lastDatesArray = new Date(lastDate).getTime()\r\n      let index = Math.floor((lastDatesArray - firstDatesArray) / 86400000)\r\n      if(index > -1){\r\n        index > 5 ? index = 7: index += 1\r\n        let datesArray = [firstDatesArray]\r\n        for (let i = 1; i<index; i++) {\r\n          datesArray.push(datesArray[i-1] + 86400000)\r\n        }\r\n        for (let i = 0; i<index; i++) {\r\n          let transfer = new Date(datesArray[i])\r\n          let transferArray = `${transfer.getDate()}/${transfer.getMonth()+1}/${(transfer.getFullYear() + \"\").slice(-2)}`\r\n          datesArray[i] = transferArray\r\n        }\r\n        this.props.setDates(datesArray)\r\n      } else this.props.setDates(null)\r\n      \r\n\r\n    }\r\n\r\n    // Метод, который преобразует введённые даты в формат YYYY-MM-DD и передаёт их в виде аргументов в метод componentDidMount()\r\n    interval = (e) => {\r\n      let first = new Date(this.stateFirstDate.value1);\r\n      let last = new Date(this.stateLastDate.value2);\r\n      if((last.getTime() - first.getTime()) > 518400000) last = new Date(first.getTime() + 518400000);\r\n\r\n      let firstDate = `${first.getFullYear()}-${first.getMonth()+1}-${first.getDate()}`;\r\n      \r\n      let lastDate = `${last.getFullYear()}-${last.getMonth()+1}-${last.getDate()}`;\r\n      this.componentDidMount(firstDate, lastDate)\r\n      \r\n    }\r\n\r\n    // Метод, который отрисовывает страницу\r\n    render() {\r\n      // если при обработке запроса обнаружилась ошибка, то выводится страница с сообщением ошибки\r\n      if (this.state.hasError) {\r\n        return( \r\n          <div>\r\n          <h1>{this.state.textError.message}</h1>\r\n          <h3>Error Page</h3>\r\n          </div>\r\n        )\r\n      }\r\n      return (\r\n        <div class = \"P\">\r\n           {/* Форма ввода имени валюты. При введении данных, вызывает метод handleChange */}\r\n          <form onSubmit={this.handleSubmit} size=\"2\">\r\n          <label>\r\n            <input type=\"text\" size=\"5\" value={this.state.value} placeholder=\"Currency\" onChange={this.handleChange} />\r\n          </label>\r\n          </form>\r\n            {/* Проверка условия корректного ввода данных */}\r\n          {this.props.dates === null ? <label>Please enter the correct interval</label> : \"EURUSDRUR\".indexOf(this.state.value) + 1 || this.state.value == \"\" ? <table border=\"5\">\r\n            <caption>Table</caption>\r\n            {/* Отрисовка дат в таблице */}\r\n              <tr>\r\n                <th></th>\r\n                {this.props.dates.map(p => (\r\n                  <td>{p}</td>\r\n                ))}\r\n              </tr>\r\n              {/* Отрисовка курса в таблице и проверка на соответствие введённой валюты */}\r\n              { \"EUR\".indexOf(this.state.value) + 1 || this.state.value == \"\" ? <tr><td>EUR</td>{this.props.eur.map((p, i) => (\r\n                <td class = {(p.Cur_OfficialRate == Math.min.apply(Math,this.props.eur.map(function(item){return item.Cur_OfficialRate;}))) ? \"colortextmin\": (p.Cur_OfficialRate == Math.max.apply(Math,this.props.eur.map(function(item){return item.Cur_OfficialRate;}))) ? \"colortextmax\":null} >{p.Cur_OfficialRate}</td>\r\n              ))}</tr> : \"\"}\r\n              { \"USD\".indexOf(this.state.value) + 1 || this.state.value == \"\" ? <tr><td>USD</td>{this.props.usd.map((p, i) => (\r\n                <td class = {(p.Cur_OfficialRate == Math.min.apply(Math,this.props.usd.map(function(item){return item.Cur_OfficialRate;}))) ? \"colortextmin\": (p.Cur_OfficialRate == Math.max.apply(Math,this.props.usd.map(function(item){return item.Cur_OfficialRate;}))) ? \"colortextmax\":null}>{p.Cur_OfficialRate}</td>\r\n              ))}</tr> : \"\"}\r\n              { \"RUR\".indexOf(this.state.value) + 1 || this.state.value == \"\" ? <tr><td>RUR</td>{this.props.rur.map((p, i) => (\r\n                <td class = {(p.Cur_OfficialRate == Math.min.apply(Math,this.props.rur.map(function(item){return item.Cur_OfficialRate;}))) ? \"colortextmin\": (p.Cur_OfficialRate == Math.max.apply(Math,this.props.rur.map(function(item){return item.Cur_OfficialRate;}))) ? \"colortextmax\":null} >{p.Cur_OfficialRate}</td>\r\n              ))}</tr> : \"\"}\r\n          </table> : <label>Please enter the correct currency</label>}\r\n          {/* Виджет ввода начальной и конечной даты. При введении начальной или конечной даты, вызывает метод handleChangeFirstDate или handleChangeLastDate соответственно */}\r\n          <div>\r\n            <input type=\"date\" value={this.stateFirstDate.value1} onChange={this.handleChangeFirstDate} defaultValue=\"2020-10-17\" min=\"1995-03-23\" name=\"date_publishing1\" required />\r\n            <input type=\"date\" class = \"place\" value={this.stateLastDate.value2} onChange={this.handleChangeLastDate} defaultValue=\"2020-10-23\" min=\"1995-03-23\" name=\"date_publishing2\" required />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default TableList;","import TableList from \"./TableList\"\r\nimport {connect} from \"react-redux\"\r\nimport {setUsdAC} from \"../redux/usd-reducer\"\r\nimport {setEurAC} from \"../redux/eur-reducer\"\r\nimport {setRurAC} from \"../redux/rur-reducer\"\r\nimport {setDatesAC} from \"../redux/dates-reducer\"\r\n\r\n// Функция для чтения состояний\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    usd: state.usdPage.usd,\r\n    eur: state.eurPage.eur,\r\n    rur: state.rurPage.rur,\r\n    dates: state.datesPage.dates\r\n  }\r\n}\r\n\r\n// Функция для передачи событий\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setUsd: (usd) => {\r\n      dispatch(setUsdAC(usd))\r\n    },\r\n\r\n    setEur: (eur) => {\r\n      dispatch(setEurAC(eur))\r\n    },\r\n\r\n    setRur: (rur) => {\r\n      dispatch(setRurAC(rur))\r\n    },\r\n\r\n    setDates: (dates) => {\r\n      dispatch(setDatesAC(dates))\r\n    }\r\n  }\r\n}\r\n\r\n// Экспорт функции connect(), которая передаёт состояния и события классовой компоненте TableList, а также вызывает эту компоненту\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TableList);","import React from 'react';\r\nimport './css/style.css';\r\nimport './css/lato-font.css';\r\nimport TableContainer from './table/TableContainer'\r\nimport { Route, Switch} from \"react-router-dom\";\r\n\r\n\r\nconst App = (props) => (\r\n  <div class = \"center\"> \r\n    <Switch>\r\n      <Route render={() => <TableContainer />} />\r\n    </Switch>\r\n  </div>\r\n)\r\n\r\n\r\nexport default App;","import * as serviceWorker from './serviceWorker';\r\nimport store from './redux/redux-store';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n    );\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}